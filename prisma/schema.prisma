generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Products

enum LevelName {
  beginner
  intermediary
  advanced
}

enum SubscriptionType {
  dev
  free
}

enum SectionType {
  bootcamp
  formation
}

enum CourseType {
  challenge
  course
  live
  project
}

enum ContentType {
  audio
  quiz
  text
  video
}

model Track {
  id                String           @id @default(uuid())
  slug              String           @unique
  badge             String // square image
  careers           Career[]
  color             String
  corporate         Corporate        @relation(fields: [corporateId], references: [id])
  created           DateTime
  description       String
  level             Int
  level_name        LevelName
  modules           Module[]
  name              String
  name_ascii        String
  preview           String // card horizontal image
  public_route      String // endpoint to dio website
  relevance         Int
  scheduled         String
  section_type      SectionType
  skills            Skill[]
  subscription_type SubscriptionType
  total_activities  Int
  track_activities  TrackActivities  @relation(fields: [trackActivitiesTrackId], references: [trackId])
  web_route         String
  workload          Int

  corporateId            String
  trackActivitiesTrackId String @unique
}

model Career {
  id     String  @id @default(uuid())
  name   String
  tracks Track[]
}

model Skill {
  id     String  @id @default(uuid())
  name   String
  tracks Track[]
}

model Corporate {
  id          String  @id @default(uuid())
  description String
  image_url   String
  name        String
  site        String?
  tracks      Track[]
}

model TrackActivities {
  code    Int
  courses Int
  lives   Int
  project Int

  trackId String
  track   Track?

  @@id([trackId])
}

model Module {
  id               String   @id @default(uuid())
  name             String
  total_activities Int
  courses          Course[]

  trackId String?
  Track   Track?  @relation(fields: [trackId], references: [id])
}

model Course {
  id                String     @id @default(uuid())
  slug              String // found duplicates
  badge             String // image badge
  description       String
  extra_information Json?
  first_slug        String?
  first_uuid        String?
  lessons           Lesson[]
  level             String
  name              String
  total             Int // total lessons
  type              CourseType
  workload          Int

  modules Module[]
}

model Lesson {
  id                   String    @id @default(uuid())
  // author Author  // TODO:
  contents             Content[]
  course               String
  description          String
  experience           Int
  large_cover          String?
  large_cover_disabled String?
  name                 String
  next_content         String?
  next_slug            String?
  order                Int
  // reference Reference  // TODO: a book reference
  workload             Int

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Content {
  id           String      @id @default(uuid())
  slug         String // found duplicate slugs
  content      Json
  duration     String?
  name         String
  pdf_url      String?
  subtitles    Subtitle[]
  type         ContentType
  youtube_code String?

  Lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId String?
}

model Subtitle {
  id        String   @id @default(uuid())
  file      String
  name      String // language
  Content   Content? @relation(fields: [contentId], references: [id])
  contentId String?
}
