generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

// generator erd {
//   provider = "prisma-erd-generator"
// }

// -------------- Auth --------------

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  role          UserRole      @default(student)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  UserTrack     UserTrack[]
  UserCourse    UserCourse[]
  UserContent   UserContent[]
  UserModule    UserModule[]
  UserLesson    UserLesson[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum UserRole {
  student
  creator
  admin
}

// -------------- Content --------------

model Track {
  id                     String           @id @default(uuid())
  slug                   String           @unique
  badge                  String // square image
  color                  String
  created                DateTime         @default(now()) // imported creation date
  description            String
  allowHTMLDescription   Boolean          @default(false)
  level                  Int
  level_name             LevelName
  name                   String
  name_ascii             String
  preview                String // card horizontal image
  public_route           String // endpoint to dio website
  relevance              Int
  scheduled              String
  section_type           SectionType
  subscription_type      SubscriptionType
  total_activities       Int
  web_route              String
  workload               Int
  corporateId            String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now()) @updatedAt
  trackActivitiesTrackId String?          @unique
  modules                Module[]
  corporate              Corporate        @relation(fields: [corporateId], references: [id])
  track_activities       TrackActivities? @relation(fields: [trackActivitiesTrackId], references: [trackId])
  careers                Career[]         @relation("CareerToTrack")
  skills                 Skill[]          @relation("SkillToTrack")
  UserTrack              UserTrack[]
}

model Module {
  id               String         @id @default(uuid())
  name             String
  total_activities Int
  trackId          String?
  Track            Track?         @relation(fields: [trackId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  courses          ModuleCourse[]
  UserModule       UserModule[]
}

model Course {
  id                String         @id @default(uuid())
  slug              String // found duplicates
  badge             String // image badge
  description       String
  first_slug        String?
  first_uuid        String?
  level             String
  name              String
  total             Int // total lessons
  type              CourseType
  workload          Int
  extra_information Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  lessons           Lesson[]
  modules           ModuleCourse[]
  UserCourse        UserCourse[]
}

model Lesson {
  id                   String       @id @default(uuid())
  // author            Author  // TODO:
  course               String
  description          String
  experience           Int
  large_cover          String?
  large_cover_disabled String?
  name                 String
  next_content         String?
  next_slug            String?
  order                Int
  // reference         Reference  // TODO: a book reference
  workload             Int
  courseId             String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  contents             Content[]
  Course               Course?      @relation(fields: [courseId], references: [id])
  UserLesson           UserLesson[]
}

model Content {
  id           String        @id @default(uuid())
  slug         String // found duplicate
  content      Json?
  order        Int
  duration     String?
  name         String
  pdf_url      String?
  type         ContentType   @default(video)
  youtube_code String?
  lessonId     String?
  Lesson       Lesson?       @relation(fields: [lessonId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  subtitles    Subtitle[]
  UserContent  UserContent[]

  @@unique([order, lessonId])
}

model Career {
  id     String  @id @default(uuid())
  name   String
  tracks Track[] @relation("CareerToTrack")
}

model Skill {
  id     String  @id @default(uuid())
  name   String  @unique
  tracks Track[] @relation("SkillToTrack")
}

model Corporate {
  id          String  @id @default(uuid())
  description String
  image_url   String
  name        String
  site        String?
  tracks      Track[]
}

model TrackActivities {
  code    Int
  courses Int
  lives   Int
  project Int
  trackId String @id
  track   Track?
}

model Subtitle {
  id        String   @id @default(uuid())
  file      String
  name      String // language
  contentId String?
  Content   Content? @relation(fields: [contentId], references: [id])
}

model ModuleCourse {
  moduleId String
  courseId String
  order    Int
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([moduleId, courseId])
  @@unique([moduleId, courseId, order])
}

enum LevelName {
  beginner
  intermediary
  advanced
}

enum SubscriptionType {
  dev
  free
}

enum SectionType {
  bootcamp
  formation
}

enum CourseType {
  challenge
  course
  live
  project
}

enum ContentType {
  audio
  quiz
  text
  video
}

// -------------- Interaction --------------

model UserTrack {
  userId  String
  trackId String

  isEnrolled     Boolean   @default(false)
  isCompleted    Boolean   @default(false)
  totalCompleted Int       @default(0) // nested courses completed
  completedAt    DateTime?

  isBookmarked Boolean   @default(false)
  bookmarkedAt DateTime?

  rating  Int?
  liked   Boolean @default(false)
  comment String? @db.VarChar(255)

  createdAt DateTime @default(now()) // startedAt
  updatedAt DateTime @updatedAt

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([userId, trackId])
}

model UserModule {
  userId   String
  moduleId String

  isCompleted           Boolean   @default(false)
  totalCoursesCompleted Int       @default(0)
  completedAt           DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}

model UserCourse {
  userId   String
  courseId String

  isEnrolled            Boolean   @default(false)
  isCompleted           Boolean   @default(false)
  totalLessonsCompleted Int       @default(0)
  completedAt           DateTime?

  rating  Int?
  liked   Boolean @default(false)
  comment String? @db.VarChar(255)

  createdAt DateTime @default(now()) // startedAt
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model UserLesson {
  userId   String
  lessonId String

  isCompleted            Boolean   @default(false)
  totalContentsCompleted Int       @default(0)
  completedAt            DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([userId, lessonId])
}

model UserContent {
  userId    String
  contentId String

  isCompleted Boolean   @default(false)
  completedAt DateTime?

  liked Boolean @default(false)

  createdAt DateTime @default(now()) // startedAt
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@id([userId, contentId])
}
