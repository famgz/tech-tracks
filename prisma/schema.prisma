generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

// generator erd {
//   provider = "prisma-erd-generator"
// }

// -------------- Auth --------------

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  role          UserRole      @default(student)
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserTrack     UserTrack[]
  UserCourse    UserCourse[]
  UserContent   UserContent[]
  UserModule    UserModule[]
  UserLesson    UserLesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum UserRole {
  student
  creator
  admin
}

// -------------- Content --------------

model Track {
  id                   String      @id @default(uuid())
  slug                 String      @unique
  badge                String // square image
  banner               String // banner image
  color                String?
  created              DateTime    @default(now()) // imported creation date
  description          String
  allowHTMLDescription Boolean     @default(false)
  level                Level
  name                 String
  nameAscii            String
  sectionType          SectionType @default(bootcamp)
  workloadHours        Int
  corporateId          String
  corporate            Corporate   @relation(fields: [corporateId], references: [id])
  careers              Career[]    @relation("CareerToTrack")
  skills               Skill[]     @relation("SkillToTrack")
  modules              Module[]
  UserTrack            UserTrack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Module {
  id         String         @id @default(uuid())
  name       String
  trackId    String?
  Track      Track?         @relation(fields: [trackId], references: [id])
  courses    ModuleCourse[]
  UserModule UserModule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Course {
  id               String         @id @default(uuid())
  slug             String // found duplicates
  badge            String // image badge
  description      String
  level            Level
  name             String
  type             CourseType
  workloadHours    Int
  extraInformation Json?
  lessons          Lesson[]
  modules          ModuleCourse[]
  UserCourse       UserCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Lesson {
  id                 String       @id @default(uuid())
  // author            Author  // TODO:
  course             String
  description        String
  largeCover         String?
  largeCoverDisabled String?
  name               String
  order              Int
  // reference         Reference  // TODO: a book reference
  workloadHours      Int
  courseId           String?
  contents           Content[]
  Course             Course?      @relation(fields: [courseId], references: [id])
  UserLesson         UserLesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Content {
  id          String        @id @default(uuid())
  slug        String // found duplicate
  content     Json?
  order       Int
  duration    String?
  name        String
  type        ContentType   @default(video)
  youtubeCode String?
  lessonId    String?
  Lesson      Lesson?       @relation(fields: [lessonId], references: [id])
  subtitles   Subtitle[]
  UserContent UserContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([order, lessonId])
}

model Career {
  id     String  @id @default(uuid())
  name   String  @unique
  tracks Track[] @relation("CareerToTrack")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Skill {
  id     String  @id @default(uuid())
  name   String  @unique
  tracks Track[] @relation("SkillToTrack")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Corporate {
  id          String  @id @default(uuid())
  description String
  imageUrl    String
  name        String  @unique
  site        String?
  tracks      Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Subtitle {
  id        String   @id @default(uuid())
  file      String
  name      String // language
  contentId String?
  Content   Content? @relation(fields: [contentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ModuleCourse {
  moduleId String
  courseId String
  order    Int
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([moduleId, courseId])
  @@unique([moduleId, courseId, order])
}

enum Level {
  beginner
  intermediary
  advanced
}

enum SubscriptionType {
  dev
  free
}

enum SectionType {
  bootcamp
  formation
}

enum CourseType {
  challenge
  course
  live
  project
}

enum ContentType {
  audio
  quiz
  text
  video
}

// enum TrackActivities {
//   code
//   courses
//   lives
//   project
// }

// -------------- Interaction --------------

model UserTrack {
  userId  String
  trackId String

  isEnrolled            Boolean   @default(false)
  enrolledAt            DateTime?
  isCompleted           Boolean   @default(false)
  completedAt           DateTime?
  totalCoursesCompleted Int       @default(0)
  isBookmarked          Boolean   @default(false)
  bookmarkedAt          DateTime?

  rating       Int?
  liked        Boolean   @default(false)
  comment      String?   @db.VarChar(255)
  feedbackedAt DateTime?

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, trackId])
}

model UserModule {
  userId   String
  moduleId String

  isCompleted           Boolean   @default(false)
  totalCoursesCompleted Int       @default(0)
  completedAt           DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, moduleId])
}

model UserCourse {
  userId   String
  courseId String

  isEnrolled            Boolean   @default(false)
  enrolledAt            DateTime?
  isCompleted           Boolean   @default(false)
  completedAt           DateTime?
  totalLessonsCompleted Int       @default(0)

  rating       Int?
  liked        Boolean   @default(false)
  comment      String?   @db.VarChar(255)
  feedbackedAt DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, courseId])
}

model UserLesson {
  userId   String
  lessonId String

  isCompleted            Boolean   @default(false)
  totalContentsCompleted Int       @default(0)
  completedAt            DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, lessonId])
}

model UserContent {
  userId    String
  contentId String

  isCompleted Boolean   @default(false)
  completedAt DateTime?

  liked Boolean @default(false)

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, contentId])
}
