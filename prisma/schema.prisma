generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------- Auth --------------

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// -------------- Content --------------

model Track {
  id                     String           @id @default(uuid())
  slug                   String           @unique
  badge                  String
  color                  String
  created                DateTime
  description            String
  level                  Int
  level_name             LevelName
  name                   String
  name_ascii             String
  preview                String
  public_route           String
  relevance              Int
  scheduled              String
  section_type           SectionType
  subscription_type      SubscriptionType
  total_activities       Int
  web_route              String
  workload               Int
  corporateId            String
  trackActivitiesTrackId String           @unique
  modules                Module[]
  corporate              Corporate        @relation(fields: [corporateId], references: [id])
  track_activities       TrackActivities  @relation(fields: [trackActivitiesTrackId], references: [trackId])
  careers                Career[]         @relation("CareerToTrack")
  skills                 Skill[]          @relation("SkillToTrack")
}

model Career {
  id     String  @id @default(uuid())
  name   String
  tracks Track[] @relation("CareerToTrack")
}

model Skill {
  id     String  @id @default(uuid())
  name   String
  tracks Track[] @relation("SkillToTrack")
}

model Corporate {
  id          String  @id @default(uuid())
  description String
  image_url   String
  name        String
  site        String?
  tracks      Track[]
}

model TrackActivities {
  code    Int
  courses Int
  lives   Int
  project Int
  trackId String @id
  track   Track?
}

model Module {
  id               String         @id @default(uuid())
  name             String
  total_activities Int
  trackId          String?
  Track            Track?         @relation(fields: [trackId], references: [id])
  courses          ModuleCourse[]
}

model Course {
  id                String         @id @default(uuid())
  slug              String
  badge             String
  description       String
  first_slug        String?
  first_uuid        String?
  level             String
  name              String
  total             Int
  type              CourseType
  workload          Int
  extra_information Json?
  lessons           Lesson[]
  modules           ModuleCourse[]
}

model ModuleCourse {
  moduleId String
  courseId String
  order    Int
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([moduleId, courseId])
  @@unique([moduleId, courseId, order])
}

model Lesson {
  id                   String    @id @default(uuid())
  course               String
  description          String
  experience           Int
  large_cover          String?
  large_cover_disabled String?
  name                 String
  next_content         String?
  next_slug            String?
  order                Int
  workload             Int
  courseId             String?
  contents             Content[]
  Course               Course?   @relation(fields: [courseId], references: [id])
}

model Content {
  id           String      @id @default(uuid())
  slug         String
  content      Json
  duration     String?
  name         String
  pdf_url      String?
  type         ContentType
  youtube_code String?
  lessonId     String?
  Lesson       Lesson?     @relation(fields: [lessonId], references: [id])
  subtitles    Subtitle[]
}

model Subtitle {
  id        String   @id @default(uuid())
  file      String
  name      String
  contentId String?
  Content   Content? @relation(fields: [contentId], references: [id])
}

enum LevelName {
  beginner
  intermediary
  advanced
}

enum SubscriptionType {
  dev
  free
}

enum SectionType {
  bootcamp
  formation
}

enum CourseType {
  challenge
  course
  live
  project
}

enum ContentType {
  audio
  quiz
  text
  video
}
